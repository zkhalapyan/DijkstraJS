var dijkstra={parse:{},graph:{},search:{}};module.exports=dijkstra;
dijkstra.graph.AdjacencyList=function $dijkstra$graph$AdjacencyList$(){var $that$$={},$adjacencyMap$$={};$that$$.addEdges=function $$that$$$addEdges$($parentNode$$,$childNodes$$){var $numChildren$$=$childNodes$$.length,$i$$;if(0<$numChildren$$)for($i$$=0;$i$$<$numChildren$$;$i$$+=1)$that$$.addEdge($parentNode$$,$childNodes$$[$i$$]);else $adjacencyMap$$[$parentNode$$]=[]};$that$$.addEdge=function $$that$$$addEdge$($parentNode$$,$childNode$$){$adjacencyMap$$[$parentNode$$]?$adjacencyMap$$[$parentNode$$].push($childNode$$):
$adjacencyMap$$[$parentNode$$]=[$childNode$$]};$that$$.getChildren=function $$that$$$getChildren$($node$$){return $adjacencyMap$$[$node$$]||[]};$that$$.getAdjacencyMap=function $$that$$$getAdjacencyMap$(){return $adjacencyMap$$};$that$$.getNodeList=function $$that$$$getNodeList$(){var $node$$,$nodeList$$=[];for($node$$ in $adjacencyMap$$)$adjacencyMap$$.hasOwnProperty($node$$)&&$nodeList$$.push($node$$);return $nodeList$$};return $that$$};
dijkstra.graph.GraphNode=function $dijkstra$graph$GraphNode$($name$$,$value$$,$children$$){var $that$$={},$children$$=$children$$||[];$that$$.getName=function $$that$$$getName$(){return $name$$};$that$$.getValue=function $$that$$$getValue$(){return $value$$};$that$$.getChildren=function $$that$$$getChildren$(){return $children$$};return $that$$};
dijkstra.parse.AdjacencyListParser=function $dijkstra$parse$AdjacencyListParser$(){var $fs$$=require("fs");return{parseAdjacencyList:function($fileName$$,$callback$$){var $fileLines$$,$numLines$$,$fileLine$$,$adjacencyList$$=dijkstra.graph.AdjacencyList(),$i$$,$colonSplit$$,$adjacentNodes$$;$fs$$.readFile($fileName$$,function($err$$,$data$$){$fileLines$$=$data$$.toString().split(";");$numLines$$=$fileLines$$.length;for($i$$=1;$i$$<$numLines$$;$i$$+=1)$fileLine$$=$fileLines$$[$i$$].trim(),0<$fileLine$$.length&&
($colonSplit$$=$fileLine$$.split(":  "),$adjacentNodes$$=2===$colonSplit$$.length?$colonSplit$$[1].split(" "):[],$adjacencyList$$.addEdges($colonSplit$$[0],$adjacentNodes$$));$callback$$($adjacencyList$$)})}}};
dijkstra.search.BreadthFirstSearch=function(){var $that$$={searchWithAdjacencyList:function($rootNode$$,$adjacencyList$$,$visitCallback$$,$doneCallback$$){return $that$$.search($rootNode$$,$visitCallback$$,$doneCallback$$,function($node$$){return $adjacencyList$$.getChildren($node$$)})},searchWithGraphNode:function($rootNode$$,$visitCallback$$,$doneCallback$$){return $that$$.search($rootNode$$,$visitCallback$$,$doneCallback$$,function($node$$){return $node$$.getChildren()})},search:function($queue$$3_rootNode$$,
$visitCallback$$,$doneCallback$$,$getChildrenCallback$$){for(var $queue$$3_rootNode$$=[$queue$$3_rootNode$$],$currentNode$$,$children$$,$visited$$={},$numChildren$$,$i$$;0<$queue$$3_rootNode$$.length;){$currentNode$$=$queue$$3_rootNode$$.shift();$children$$=$getChildrenCallback$$($currentNode$$);$numChildren$$=$children$$.length;for($i$$=0;$i$$<$numChildren$$;$i$$+=1)$visitCallback$$($currentNode$$,$children$$[$i$$]),$visited$$[$children$$[$i$$]]||($queue$$3_rootNode$$.push($children$$[$i$$]),$visited$$[$children$$[$i$$]]=
!0)}$doneCallback$$&&$doneCallback$$()}};return $that$$}();
dijkstra.search.DepthFirstSearch=function(){return{search:function($rootNode$$,$callback$$){for(var $stack$$=[$rootNode$$],$currentNode$$,$children$$,$visited$$={},$i$$;0<$stack$$.length;){$currentNode$$=$stack$$.pop();$children$$=$currentNode$$.getChildren();for($i$$=0;$i$$<$children$$.length;$i$$+=1)$visited$$[$children$$[$i$$]]||($callback$$($currentNode$$,$children$$[$i$$]),$stack$$.push($children$$[$i$$]),$visited$$[$children$$[$i$$]]=!0)}}}}();
dijkstra.search.ShortestPath=function(){var $that$$={},$BreadthFirstSearch$$=dijkstra.search.BreadthFirstSearch;$that$$.findShortestPathWithBFS=function $$that$$$findShortestPathWithBFS$($rootNode$$,$adjacencyList$$,$callback$$){var $distance$$={},$parentMap$$={},$currentDistance$$;$distance$$[$rootNode$$]=0;$BreadthFirstSearch$$.searchWithAdjacencyList($rootNode$$,$adjacencyList$$,function($parentNode$$,$childNode$$){$currentDistance$$=$distance$$[$parentNode$$]+1;if(!$distance$$.hasOwnProperty($childNode$$)||
$currentDistance$$<$distance$$[$childNode$$])$parentMap$$[$childNode$$]=$parentNode$$,$distance$$[$childNode$$]=$currentDistance$$},function(){$callback$$($distance$$,$parentMap$$)})};$that$$.backtrackPath=function $$that$$$backtrackPath$($srcNode$$,$currentNode$$,$parentMap$$,$onNextStepCallback$$,$onDoneCallback$$){for(var $previousNode$$;;){if($currentNode$$===$srcNode$$){$onDoneCallback$$(!0);break}else if(!$parentMap$$.hasOwnProperty($currentNode$$)){$onDoneCallback$$(!1);break}$previousNode$$=
$parentMap$$[$currentNode$$];$onNextStepCallback$$($previousNode$$,$currentNode$$);$currentNode$$=$previousNode$$}};return $that$$}();